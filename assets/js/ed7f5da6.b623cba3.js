"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9001],{3392:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"primitive-types/bool","title":"Reference: Bool","description":"","source":"@site/../reference/primitive-types/bool.md","sourceDirName":"primitive-types","slug":"/primitive-types/bool","permalink":"/docusaurus-test/reference/primitive-types/bool","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Reference: Bool","description":""},"sidebar":"referenceSidebar","previous":{"title":"2.1 Integers","permalink":"/docusaurus-test/reference/primitive-types/integers"},"next":{"title":"2.3 Address","permalink":"/docusaurus-test/reference/primitive-types/address"}}');var n=s(3420),t=s(5521);const l={title:"Reference: Bool",description:""},o="Bool",c={},d=[{value:"Literals",id:"literals",level:2},{value:"Operations",id:"operations",level:2},{value:"Logical",id:"logical",level:3},{value:"Control Flow",id:"control-flow",level:3},{value:"Ownership",id:"ownership",level:2}];function a(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"bool",children:"Bool"})}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"bool"})," is Move's primitive type for boolean ",(0,n.jsx)(r.code,{children:"true"})," and ",(0,n.jsx)(r.code,{children:"false"})," values."]}),"\n",(0,n.jsx)(r.h2,{id:"literals",children:"Literals"}),"\n",(0,n.jsxs)(r.p,{children:["Literals for ",(0,n.jsx)(r.code,{children:"bool"})," are either ",(0,n.jsx)(r.code,{children:"true"})," or ",(0,n.jsx)(r.code,{children:"false"}),"."]}),"\n",(0,n.jsx)(r.h2,{id:"operations",children:"Operations"}),"\n",(0,n.jsx)(r.h3,{id:"logical",children:"Logical"}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"bool"})," supports three logical operations:"]}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Syntax"}),(0,n.jsx)(r.th,{children:"Description"}),(0,n.jsx)(r.th,{children:"Equivalent Expression"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"&&"})}),(0,n.jsx)(r.td,{children:"short-circuiting logical and"}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"p && q"})," is equivalent to ",(0,n.jsx)(r.code,{children:"if (p) q else false"})]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)("code",{children:"||"})}),(0,n.jsx)(r.td,{children:"short-circuiting logical or"}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)("code",{children:"p || q"})," is equivalent to ",(0,n.jsx)(r.code,{children:"if (p) true else q"})]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"!"})}),(0,n.jsx)(r.td,{children:"logical negation"}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"!p"})," is equivalent to ",(0,n.jsx)(r.code,{children:"if (p) false else true"})]})]})]})]}),"\n",(0,n.jsx)(r.h3,{id:"control-flow",children:"Control Flow"}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"bool"})," values are used in several of Move's control-flow constructs:"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"/docusaurus-test/reference/control-flow/conditionals",children:(0,n.jsx)(r.code,{children:"if (bool) { ... }"})})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"/docusaurus-test/reference/control-flow/loops",children:(0,n.jsx)(r.code,{children:"while (bool) { .. }"})})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"/docusaurus-test/reference/abort-and-assert",children:(0,n.jsx)(r.code,{children:"assert!(bool, u64)"})})}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"ownership",children:"Ownership"}),"\n",(0,n.jsxs)(r.p,{children:["As with the other scalar values built-in to the language, boolean values are implicitly copyable,\nmeaning they can be copied without an explicit instruction such as\n",(0,n.jsx)(r.a,{href:"/docusaurus-test/reference/variables#move-and-copy",children:(0,n.jsx)(r.code,{children:"copy"})}),"."]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},5521:(e,r,s)=>{s.d(r,{R:()=>l,x:()=>o});var i=s(6672);const n={},t=i.createContext(n);function l(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);